import Foundation

enum BattleResult {
    case heroWon
    case heroDied
    case enemyFled
}

protocol BattleService {
    func startBattle(hero: Character, enemy: Enemy) -> (result: BattleResult, updatedHero: Character, updatedEnemy: Enemy)
}

final class SimpleBattleService: BattleService {
    private let store: LevelStateStore?

    init(store: LevelStateStore? = nil) {
        self.store = store
    }

    func startBattle(hero: Character, enemy: Enemy) -> (result: BattleResult, updatedHero: Character, updatedEnemy: Enemy) {
        ChatLogger.shared.addMessage("‚öîÔ∏è –ë–ò–¢–í–ê: \(hero.name) ‚ù§Ô∏è \(hero.currentHealth) vs \(enemy.name) üíö\(enemy.currentHealth)")
        ChatLogger.shared.addMessage("")

        var currentHero = hero
        var currentEnemy = enemy

        // 1Ô∏è‚É£ –•–æ–¥ –≥–µ—Ä–æ—è
        if currentEnemy.type == .mimic {
            currentEnemy.isDisguised = false
            currentEnemy.hostility = .aggressive
        }
        
        if currentEnemy.type == .vampire, !currentEnemy.evasionUsed {
            // –ü–µ—Ä–≤—ã–π —É–¥–∞—Ä –ø–æ –≤–∞–º–ø–∏—Ä—É –≤—Å–µ–≥–¥–∞ –º–∏–º–æ
            ChatLogger.shared.addMessage("\(currentEnemy.name) –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª evasion üí´ –∏ —É–≤–µ—Ä–Ω—É–ª—Å—è –æ—Ç –≤–∞—à–µ–≥–æ —É–¥–∞—Ä–∞")
            currentEnemy.evasionUsed = true
        } else if currentHero.canAct {
            let hitChance = max(10, 50 + (currentHero.dexterity - currentEnemy.dexterity) * 5)
            let roll = Int.random(in: 1...100)

            if roll <= hitChance {
                let weaponDamage = currentHero.currentWeapon?.damageRange?.randomElement() ?? 2
                let totalDamage = currentHero.strength + weaponDamage
                currentEnemy.currentHealth -= totalDamage
                ChatLogger.shared.addMessage("üí• –í—ã –Ω–∞–Ω–µ—Å–ª–∏ \(totalDamage) —É—Ä–æ–Ω–∞")
                RunRecord.addRecord.hitsDealt += 1
            } else {
                ChatLogger.shared.addMessage("‚ùå –í—ã –ø—Ä–æ–º–∞—Ö–Ω—É–ª–∏—Å—å")
                RunRecord.addRecord.hitsTaken += 1
            }
        } else if !currentHero.canAct {
            ChatLogger.shared.addMessage("üí§ –í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∞—Ç–∞–∫–æ–≤–∞—Ç—å (–°–æ–Ω)")
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≤—Ä–∞–≥–∞
        if currentEnemy.currentHealth <= 0 {
            ChatLogger.shared.addMessage("")
            ChatLogger.shared.addMessage("‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã: ‚úÖ \(currentEnemy.name) –ø–æ–≤–µ—Ä–∂–µ–Ω! –ü–æ–ª—É—á–µ–Ω–æ \(currentEnemy.gold) ü™ôGold Coin")

            currentHero.gold += currentEnemy.gold
            RunRecord.addRecord.treasures += currentEnemy.gold
            RunRecord.addRecord.enemiesDefeated += 1
            return (.heroWon, currentHero, currentEnemy)
        }

        // 2Ô∏è‚É£ –•–æ–¥ –≤—Ä–∞–≥–∞
        if currentEnemy.canAct {
            let hitChance = max(30, 50 + (currentEnemy.dexterity - currentHero.dexterity) * 5)
            let roll = Int.random(in: 1...100)

            if roll <= hitChance {
                let damage = max(2, currentEnemy.strength / 2)
                currentHero.currentHealth -= damage
                ChatLogger.shared.addMessage("üí• \(currentEnemy.name) –Ω–∞–Ω–æ—Å–∏—Ç \(damage) —É—Ä–æ–Ω–∞")

                // –ü—Ä–∏–º–µ–Ω—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç—ã –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∞—Ç–∞–∫–∏
                applyEffects(timing: .afterAttack, hero: &currentHero, enemy: &currentEnemy)
            } else {
                ChatLogger.shared.addMessage("‚ùå \(currentEnemy.name) –ø—Ä–æ–º–∞—Ö–Ω—É–ª—Å—è")
                // –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏–º–µ–Ω—è—é—Ç—Å—è –¥–∞–∂–µ –ø—Ä–∏ –ø—Ä–æ–º–∞—Ö–µ
                applyEffects(timing: .afterAttack, hero: &currentHero, enemy: &currentEnemy)
            }
        } else {
            ChatLogger.shared.addMessage("üòÆ‚Äçüí® \(currentEnemy.name) –Ω–µ –º–æ–∂–µ—Ç –∞—Ç–∞–∫–æ–≤–∞—Ç—å (—É—Å—Ç–∞–ª–æ—Å—Ç—å)")
        }
    
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–º–µ—Ä—Ç–∏ –≥–µ—Ä–æ—è
        if currentHero.currentHealth <= 0 {
            return (.heroDied, currentHero, currentEnemy)
        }

        // 3Ô∏è‚É£ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ö–æ–¥–∞
        ChatLogger.shared.addMessage("\n‚öîÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –±–∏—Ç–≤—ã: \(currentHero.name) ‚ù§Ô∏è \(currentHero.currentHealth) vs \(currentEnemy.name) üíö \(currentEnemy.currentHealth)")
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –ø–æ—Å–ª–µ –±–∏—Ç–≤—ã
        if let store = store {
            var state = store.state
            state.player.model = currentHero
            store.state = state
        }

        return (.enemyFled, currentHero, currentEnemy)
    }

    private func applyEffects(timing: EffectTiming, hero: inout Character, enemy: inout Enemy) {
        for i in enemy.effects.indices {
            var effect = enemy.effects[i]
            if effect.timing == timing {
                effect.apply(to: &hero, from: &enemy)
                enemy.effects[i] = effect
            }
        }
    }
}
