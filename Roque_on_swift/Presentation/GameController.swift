import Foundation
import Darwin.ncurses

/// –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏–≥—Ä—ã.
/// –û—Ä–∫–µ—Å—Ç—Ä—É–µ—Ç UI-—Ü–∏–∫–ª:
/// 1) –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É BuildFrameUseCase –≥–æ—Ç–æ–≤—ã–π –∫–∞–¥—Ä (DTO) –∏ –≤–∏–¥–∏–º–æ—Å—Ç—å,
/// 2) —Ä–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞–¥—Ä,
/// 3) —á–∏—Ç–∞–µ—Ç –≤–≤–æ–¥ –∏ –º–∞–ø–∏—Ç –µ–≥–æ –≤ PlayerAction,
/// 4) –ø–µ—Ä–µ–¥–∞—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ö–æ–¥–∞ –∏–≥—Ä–æ–∫–∞ –≤ GameStepUseCase (–µ–¥–∏–Ω—ã–π ¬´—Ç–∏–∫¬ª),
/// 5) —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–Ω–∞–ø—à–æ—Ç.
final class GameController {
    // MARK: - Use Cases (Application/Domain)
    private let gameStateUC: CurrentGameStateUseCase
    private let playerUC: PlayerActionUseCase
    private let saveUC: SaveSessionUseCase
    private let recordUseCase: AppendRunRecordUseCase
    private let gameStepUC: GameStepUseCase               // –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —à–∞–≥–∞
    private let frameUC: BuildFrameUseCase                // —Å–±–æ—Ä–∫–∞ –∫–∞–¥—Ä–∞ + FOV
    
    // MARK: - Render/FOV
    /// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—É–º–∞–Ω–∞ –≤–æ–π–Ω—ã (visible/seen –Ω–∞ —É—Ä–æ–≤–Ω–µ
    private var fog: VisibilityMap
    /// –†–∞–¥–∏—É—Å –æ–±–∑–æ—Ä–∞ –¥–ª—è FOV (–≤ –∫–ª–µ—Ç–∫–∞—Ö)
    private let fovRadius: Int
    
    init(gameState: CurrentGameStateUseCase,
         actions: PlayerActionUseCase,
         save: SaveSessionUseCase,
         recordUC: AppendRunRecordUseCase,
         fog: VisibilityMap,
         gameStepUC: GameStepUseCase,
         frameUC: BuildFrameUseCase,
         fovRadius: Int = 5) {
        self.gameStateUC = gameState
        self.playerUC = actions
        self.saveUC = save
        self.recordUseCase = recordUC
        self.fog = fog
        self.gameStepUC = gameStepUC
        self.frameUC = frameUC
        self.fovRadius = fovRadius
    }
    
    /// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞: –∑–∞–ø—É—Å–∫–∞–µ—Ç –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
    func run() { mainLoop() }
}

// MARK: - Main loop
private extension GameController {
    /// –ì–ª–∞–≤–Ω—ã–π –∏–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª:
    /// 1) –ø–æ–ª—É—á–∞–µ–º —Å–Ω–∞–ø—à–æ—Ç –∏ –ø–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º FOV
    /// 2) —Ä–µ–Ω–¥–µ—Ä–∏–º –∫–∞–¥—Ä
    /// 3) —á–∏—Ç–∞–µ–º –≤–≤–æ–¥
    /// 4) –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
    /// 5) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ LastGame
    func mainLoop() {
        while true {
            // 1) –ö–∞–¥—Ä + –≤–∏–¥–∏–º–æ—Å—Ç—å
            let built = frameUC.buildFrame(fovRadius: fovRadius)
            fog.visible = built.visible
            fog.seenByLevel = built.explored
            
            // 2) —Ä–µ–Ω–¥–µ—Ä
            render(built.frame)
            
            // 3) –≤–≤–æ–¥
            let input = readInput()
            if input == .quit { break }
            
            // 4) –º–∞–ø–ø–∏–º –≤–≤–æ–¥ ‚Üí PlayerAction –∏ –∏—Å–ø–æ–ª–Ω—è–µ–º
            let playerResult = handle(input, frame: built.frame)
            
            // 5) –µ–¥–∏–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä ¬´—Ç–∏–∫–∞¬ª
            let directive = gameStepUC.advance(after: playerResult)
            
            switch directive {
            case .gameOver:
                ChatLogger.shared.addMessage("üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É‚Ä¶")
                let finalBuilt = frameUC.buildFrame(fovRadius: fovRadius)
                guard case .success = saveRecordUseCase.callAsFunction(RunRecord.addRecord),
                      case .success = saveUC.clean()
                else {
                    Menu.messageError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±—â–∏–µ —Ä–µ–∫–æ—Ä–¥—ã")
                    exit(0)
                }
                fog.visible = finalBuilt.visible
                fog.seenByLevel = finalBuilt.explored
                render(finalBuilt.frame)
                _ = getch(); exit(0)
                
            case .gameCompleted:
                ChatLogger.shared.addMessage("üèÜ –í—ã –≤—ã–±—Ä–∞–ª–∏—Å—å! –ù–∞–∂–º–∏—Ç–µ –ª—é–±—É—é –∫–ª–∞–≤–∏—à—É‚Ä¶")
                RunRecord.addRecord.levelReached += 1
                guard case .success = saveRecordUseCase.callAsFunction(RunRecord.addRecord)
                else {
                    Menu.messageError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –æ–±—â–∏–µ —Ä–µ–∫–æ—Ä–¥—ã")
                    exit(0)
                }
                let finalBuilt = frameUC.buildFrame(fovRadius: fovRadius)
                fog.visible = finalBuilt.visible
                fog.seenByLevel = finalBuilt.explored
                render(finalBuilt.frame)
                _ = getch(); exit(0)
                
            case .levelCompleted:
                fog.visible.removeAll()
                fog.seenByLevel.removeAll()
                ChatLogger.shared.addMessage("‚¨áÔ∏è –°–ø—É—Å–∫–∞–µ–º—Å—è –≥–ª—É–±–∂–µ‚Ä¶")
                RunRecord.addRecord.levelReached += 1
                updateRecord()
            case .continueGame:
                break
            }
            
            // 6) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ
            handleSaveGame()
            upCellWalked ()
        }
    }
}

// MARK: - Rendering
private extension GameController {
    /// –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è/–∞–∫—Ç–µ—Ä–æ–≤ –∏ HUD
    func render(_ frame: GameFrameDTO) {
        GameRenderer.drawFrame(world: frame.world, actors: frame.actors, fog: fog, clear: true)
        GameRenderer.drawHUD(frame.hud, on: frame.world.canvasSize)
        refresh()
    }
}

// MARK: - Input
/// –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–≤–∏–∂–µ–Ω–∏—è
fileprivate enum Direction { case up, down, left, right }

/// –í—ã—Å–æ–∫–æ—É—Ä–æ–≤–Ω–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –≤–≤–æ–¥–∞ (UI-—Å–ª–æ–π)
fileprivate enum Input: Equatable {
    case move(Direction)
    case openWeaponMenu
    case openFoodMenu
    case openPotionMenu
    case openScrollMenu
    case openHelp
    case quit
    case none
}

private extension GameController {
    /// –°—á–∏—Ç—ã–≤–∞–µ–º –∫–ª–∞–≤–∏—à—É –∏–∑ ncurses –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏–º –≤ –∫–æ–º–∞–Ω–¥—É `Input`.
    /// - WASD ‚Äî –¥–≤–∏–∂–µ–Ω–∏–µ
    /// - h/j/k/e ‚Äî –º–µ–Ω—é
    /// - ? ‚Äî —Å–ø—Ä–∞–≤–∫–∞
    /// - q ‚Äî –≤—ã—Ö–æ–¥
    func readInput() -> Input {
        let k = getch()
        switch k {
        case Int32(UInt8(ascii: "q")): return .quit
        case Int32(UInt8(ascii: "?")): return .openHelp
            
        case Int32(UInt8(ascii: "w")): return .move(.up)
        case Int32(UInt8(ascii: "s")): return .move(.down)
        case Int32(UInt8(ascii: "a")): return .move(.left)
        case Int32(UInt8(ascii: "d")): return .move(.right)
            
        case Int32(UInt8(ascii: "h")): return .openWeaponMenu
        case Int32(UInt8(ascii: "j")): return .openFoodMenu
        case Int32(UInt8(ascii: "k")): return .openPotionMenu
        case Int32(UInt8(ascii: "e")): return .openScrollMenu
            
        default: return .none
        }
    }
}

// MARK: - Input handling ‚Üí PlayerActionResult
private extension GameController {
    /// –ú–∞–ø–ø–∏—Ç `Input` –≤ –¥–æ–º–µ–Ω–Ω—ã–π `PlayerAction` –∏ –∏—Å–ø–æ–ª–Ω—è–µ—Ç —á–µ—Ä–µ–∑ `playerUC`.
    /// –ú–æ–¥–∞–ª—å–Ω—ã–µ –º–µ–Ω—é (–æ—Ä—É–∂–∏–µ/–µ–¥–∞/—ç–ª–∏–∫—Å–∏—Ä—ã/—Å–≤–∏—Ç–∫–∏) –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç `.noOp`, –µ—Å–ª–∏ –≤—ã–±–æ—Ä –Ω–µ —Å–¥–µ–ª–∞–Ω.
    func handle(_ input: Input, frame: GameFrameDTO) -> PlayerActionOutcome {
        switch input {
        case .quit:
            // –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, —á—Ç–æ–±—ã GameStepUC –º–æ–≥ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å
            return .moved
            
        case .openHelp:
            Menu.showHelp(frame: frame, fog: fog)
            return .moved
            
        case .move(let dir):
            let action: PlayerAction = {
                switch dir {
                case .up: return .moveUp
                case .down: return .moveDown
                case .left: return .moveLeft
                case .right: return .moveRight
                }
            }()
            return playerUC.execute(action)
            
        case .openWeaponMenu:
            if let idx = Menu.selectFromList(title: "–û—Ä—É–∂–∏–µ",
                                             items: frame.actors.player.inventory.weapons,
                                             allowZero: true,
                                             frame: frame, fog: fog) {
                let a: PlayerAction = (idx == -1) ? .equipWeapon(nil) : .equipWeapon(idx)
                return playerUC.execute(a)
            }
            return .blockedTerrain
            
        case .openFoodMenu:
            if let idx = Menu.selectFromList(title: "–ï–¥–∞",
                                             items: frame.actors.player.inventory.foods,
                                             allowZero: false,
                                             frame: frame, fog: fog) {
                return playerUC.execute(.eatFood(idx))
            }
            return .blockedTerrain
            
        case .openPotionMenu:
            if let idx = Menu.selectFromList(title: "–≠–ª–∏–∫—Å–∏—Ä—ã",
                                             items: frame.actors.player.inventory.potions,
                                             allowZero: false,
                                             frame: frame, fog: fog) {
                return playerUC.execute(.drinkPotion(idx))
            }
            return .blockedTerrain
            
        case .openScrollMenu:
            if let idx = Menu.selectFromList(title: "–°–≤–∏—Ç–∫–∏",
                                             items: frame.actors.player.inventory.scrolls,
                                             allowZero: false,
                                             frame: frame, fog: fog) {
                return playerUC.execute(.readScroll(idx))
            }
            return .blockedTerrain
            
        case .none:
            return .blockedTerrain
        }
    }
}

// MARK: - Persistence
private extension GameController {
    private func handleSaveGame() {
        guard case let .success(snapshot) = gameStateUC.execute(),
              case .success = saveUC(snapshot: snapshot)
        else {
            return
        }
    }
}
extension GameController {
    private func upCellWalked () {
        RunRecord.addRecord.cellsWalked += 1
    }
    private func updateRecord() {
            guard case .success = recordUseCase.saveCurrentRating(RunRecord.addRecord)
            else {
                Menu.messageError("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∫–æ—Ä–¥")
                exit(0)
            }
        }

}
